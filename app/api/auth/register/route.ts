import { NextRequest, NextResponse } from 'next/server';
import { createHash } from 'crypto';
import postgres from 'postgres';
import { v4 as uuidv4 } from 'uuid';

// Utiliser notre module db.js centralis√© pour √©viter de multiplier les connexions
import sql from '@/lib/db';

// Fonction pour hacher le mot de passe
function hashPassword(password: string): string {
  console.log('üîç [REGISTER] Hashing password with SHA-256');
  console.log(`üî° [REGISTER] Password string before hashing: "${password}" (length: ${password.length})`);
  const hash = createHash('sha256').update(password).digest('hex');
  console.log(`üîë [REGISTER] Resulting hash: ${hash}`);
  return hash;
}

export async function POST(req: NextRequest) {
  try {
    console.log('‚è≥ [REGISTER] D√©but du processus d\'inscription');
    const body = await req.json();
    const { email, password, username, displayName } = body;
    
    console.log(`üìß [REGISTER] Tentative d'inscription pour: ${email}, username: ${username}`);

    // Validation des donn√©es
    if (!email || !password) {
      console.log('‚ùå [REGISTER] Email ou mot de passe manquant');
      return NextResponse.json({ error: 'Email and password are required' }, { status: 400 });
    }

    // V√©rifier si l'utilisateur existe d√©j√†
    console.log(`üîç [REGISTER] V√©rification si l'utilisateur existe d√©j√†: ${email} ou ${username}`);
    const existingUser = await sql`
      SELECT * FROM "users" WHERE email = ${email} OR username = ${username}
    `;

    if (existingUser.length > 0) {
      console.log(`‚ùå [REGISTER] Utilisateur existe d√©j√†: ${email} ou ${username}`);
      return NextResponse.json({ error: 'User already exists' }, { status: 409 });
    }

    // Cr√©er le nouvel utilisateur
    console.log(`üîê [REGISTER] Hachage du mot de passe pour: ${email}`);
    const hashedPassword = hashPassword(password);
    console.log(`üíæ [REGISTER] Mot de passe hach√©: ${hashedPassword}`);
    
    // Transaction pour cr√©er l'utilisateur et sa m√©thode d'authentification
    console.log(`üìù [REGISTER] D√©but de la transaction pour cr√©er l'utilisateur: ${email}`);
    await sql.begin(async (sql) => {
      // Cr√©er l'utilisateur
      console.log(`üë§ [REGISTER] Cr√©ation de l'utilisateur: ${email}`);
      const newUser = await sql`
        INSERT INTO "users" (email, username, display_name, is_verified)
        VALUES (${email}, ${username}, ${displayName || username}, false)
        RETURNING *
      `;
      
      const userId = newUser[0].id;
      console.log(`‚úÖ [REGISTER] Utilisateur cr√©√© avec ID: ${userId}`);
      
      // R√©cup√©rer l'ID de la m√©thode d'authentification par email/password
      console.log(`üîç [REGISTER] R√©cup√©ration de l'ID de la m√©thode d'authentification par email/password`);
      const authMethod = await sql`
        SELECT id FROM "auth_methods" WHERE name = 'email_password'
      `;
      
      const authMethodId = authMethod[0].id;
      console.log(`üîë [REGISTER] ID de la m√©thode d'authentification: ${authMethodId}`);
      
      // Cr√©er la m√©thode d'authentification pour cet utilisateur
      console.log(`üîí [REGISTER] Cr√©ation de la m√©thode d'authentification pour l'utilisateur: ${userId}`);
      // Ici le mot de passe est correctement stock√© dans auth_data sous forme de JSON,
      // donc lors de la lecture il faudra parser cette cha√Æne
      const authData = JSON.stringify({ password: hashedPassword });
      console.log(`üîí [REGISTER] Donn√©es d'authentification: ${authData}`);
      await sql`
        INSERT INTO "user_auth_methods" (user_id, auth_method_id, auth_provider_id, auth_data, is_primary)
        VALUES (
          ${userId}, 
          ${authMethodId}, 
          ${email}, 
          ${authData}, 
          true
        )
      `;
      console.log(`‚úÖ [REGISTER] M√©thode d'authentification cr√©√©e avec succ√®s pour l'utilisateur: ${userId}`);
    });

    console.log(`üéâ [REGISTER] Inscription r√©ussie pour: ${email}`);
    return NextResponse.json({ success: true, message: 'User registered successfully' }, { status: 201 });
  } catch (error) {
    console.error('üí• [REGISTER] Erreur lors de l\'inscription:', error);
    return NextResponse.json({ error: 'Registration failed' }, { status: 500 });
  }
} 